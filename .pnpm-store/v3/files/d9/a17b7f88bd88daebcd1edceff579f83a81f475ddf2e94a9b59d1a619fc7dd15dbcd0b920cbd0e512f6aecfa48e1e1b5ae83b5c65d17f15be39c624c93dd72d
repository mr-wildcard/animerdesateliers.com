var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import parser from "@astrojs/parser";
import {existsSync, promises as fs} from "fs";
import {posix as path} from "path";
import {performance} from "perf_hooks";
import resolve from "resolve";
import {
  loadConfiguration,
  logger as snowpackLogger,
  NotFoundError,
  startServer as startSnowpackServer
} from "snowpack";
import {fileURLToPath} from "url";
import {z} from "zod";
import {generatePaginateFunction} from "./build/paginate.js";
import {canonicalURL, getSrcPath, stopTimer} from "./build/util.js";
import {formatConfigError} from "./config.js";
import {ConfigManager} from "./config_manager.js";
import snowpackExternals from "./external.js";
import {debug, info} from "./logger.js";
import {createManifest} from "./manifest/create.js";
import {nodeBuiltinsMap} from "./node_builtins.js";
import {configureSnowpackLogger} from "./snowpack-logger.js";
import {convertMatchToLocation, validateGetStaticPathsModule, validateGetStaticPathsResult} from "./util.js";
const {CompileError} = parser;
configureSnowpackLogger(snowpackLogger);
function getParams(array) {
  const fn = (match) => {
    const params = {};
    array.forEach((key, i) => {
      if (key.startsWith("...")) {
        params[key.slice(3)] = match[i + 1] ? decodeURIComponent(match[i + 1]) : void 0;
      } else {
        params[key] = decodeURIComponent(match[i + 1]);
      }
    });
    return params;
  };
  return fn;
}
async function getStaticPathsMemoized(runtimeConfig, component, mod, args) {
  runtimeConfig.cache.staticPaths[component] = runtimeConfig.cache.staticPaths[component] || mod.exports.getStaticPaths(args);
  return (await runtimeConfig.cache.staticPaths[component]).flat();
}
async function load(config, rawPathname) {
  const {logging, snowpackRuntime, snowpack, configManager} = config;
  const {buildOptions, devOptions} = config.astroConfig;
  const site = new URL(buildOptions.site || `http://${devOptions.hostname}:${devOptions.port}`);
  const fullurl = new URL(rawPathname || "/", site.origin);
  const reqPath = decodeURI(fullurl.pathname);
  try {
    const result = await snowpack.loadUrl(reqPath);
    if (!result)
      throw new Error(`Unable to load ${reqPath}`);
    debug(logging, "access", reqPath);
    return __spreadValues({
      statusCode: 200
    }, result);
  } catch (err) {
    if (err.failed) {
      return {statusCode: 500, type: "unknown", error: err};
    }
  }
  info(logging, "access", reqPath);
  const routeMatch = config.manifest.routes.find((route) => route.pattern.test(reqPath));
  if (!routeMatch) {
    return {statusCode: 404, error: new Error("No matching route found.")};
  }
  const paramsMatch = routeMatch.pattern.exec(reqPath);
  const routeLocation = convertMatchToLocation(routeMatch, config.astroConfig);
  const params = paramsMatch ? getParams(routeMatch.params)(paramsMatch) : {};
  let pageProps = {};
  try {
    if (configManager.needsUpdate()) {
      await configManager.update();
    }
    const mod = await snowpackRuntime.importModule(routeLocation.snowpackURL);
    debug(logging, "resolve", `${reqPath} -> ${routeLocation.snowpackURL}`);
    if (!routeMatch.path) {
      validateGetStaticPathsModule(mod);
      const staticPaths = await getStaticPathsMemoized(config, routeMatch.component, mod, {
        paginate: generatePaginateFunction(routeMatch),
        rss: () => {
        }
      });
      validateGetStaticPathsResult(staticPaths, logging);
      const matchedStaticPath = staticPaths.find(({params: _params}) => JSON.stringify(_params) === JSON.stringify(params));
      if (!matchedStaticPath) {
        return {statusCode: 404, error: new Error(`[getStaticPaths] route pattern matched, but no matching static path found. (${reqPath})`)};
      }
      pageProps = __spreadValues({}, matchedStaticPath.props) || {};
    }
    const requestURL = new URL(fullurl.toString());
    if (reqPath !== "/500") {
      requestURL.search = "";
    }
    let html = await mod.exports.__renderPage({
      request: {
        params,
        url: requestURL,
        canonicalURL: canonicalURL(requestURL.pathname, site.toString())
      },
      children: [],
      props: pageProps,
      css: Array.isArray(mod.css) ? mod.css : typeof mod.css === "string" ? [mod.css] : [],
      scripts: mod.exports.default[Symbol.for("astro.hoistedScripts")]
    });
    return {
      statusCode: 200,
      contentType: "text/html; charset=utf-8",
      contents: html,
      rss: void 0
    };
  } catch (err) {
    if (err instanceof z.ZodError) {
      console.log(formatConfigError(err));
      return {
        statusCode: 500,
        type: "config-error",
        error: err
      };
    }
    if (err.code === "parse-error" || err instanceof SyntaxError) {
      return {
        statusCode: 500,
        type: "parse-error",
        error: err
      };
    }
    if (err instanceof ReferenceError && err.toString().includes("window is not defined")) {
      return {
        statusCode: 500,
        type: "ssr",
        error: new Error(`[${reqPath}]
    The window object is not available during server-side rendering (SSR).
    Try using \`import.meta.env.SSR\` to write SSR-friendly code.
    https://docs.astro.build/reference/api-reference/#importmeta`)
      };
    }
    if (err instanceof NotFoundError && rawPathname) {
      const fileMatch = err.toString().match(/\(([^\)]+)\)/);
      const missingFile = fileMatch && fileMatch[1].replace(/^\/_astro/, "").replace(/\.proxy\.js$/, "") || void 0;
      const distPath = path.extname(rawPathname) ? rawPathname : rawPathname.replace(/\/?$/, "/index.html");
      const srcFile = getSrcPath(distPath, {astroConfig: config.astroConfig});
      const code = existsSync(srcFile) ? await fs.readFile(srcFile, "utf8") : "";
      let start = 0;
      const segments = missingFile ? missingFile.split("/").filter((segment) => !!segment) : [];
      while (segments.length) {
        const importMatch = code.indexOf(segments.join("/"));
        if (importMatch >= 0) {
          start = importMatch;
          break;
        }
        segments.shift();
      }
      return {
        statusCode: 500,
        type: "not-found",
        error: new CompileError({
          code,
          filename: srcFile.pathname,
          start,
          end: 1,
          message: `Could not find${missingFile ? ` "${missingFile}"` : " file"}`
        })
      };
    }
    return {
      statusCode: 500,
      type: "unknown",
      error: err
    };
  }
}
async function createSnowpack(astroConfig, options) {
  var _a;
  const {projectRoot, src} = astroConfig;
  const {mode, logging, resolvePackageUrl} = options;
  const frontendPath = new URL("./frontend/", import.meta.url);
  const resolveDependency = (dep) => resolve.sync(dep, {basedir: fileURLToPath(projectRoot)});
  const isHmrEnabled = mode === "development";
  const configManager = new ConfigManager(astroConfig, resolvePackageUrl);
  let snowpack;
  let astroPluginOptions = {
    astroConfig,
    mode,
    logging,
    resolvePackageUrl,
    configManager
  };
  const mountOptions = __spreadProps(__spreadValues({}, existsSync(astroConfig.public) ? {[fileURLToPath(astroConfig.public)]: {url: "/", static: true, resolve: false}} : {}), {
    [fileURLToPath(frontendPath)]: "/_astro_frontend",
    [fileURLToPath(src)]: "/_astro/src"
  });
  if (astroConfig.devOptions.tailwindConfig) {
    process.env.TAILWIND_DISABLE_TOUCH = true;
  }
  const rendererInstances = await configManager.buildRendererInstances();
  const knownEntrypoints = [
    "astro/dist/internal/__astro_component.js",
    "astro/dist/internal/element-registry.js",
    "astro/dist/internal/fetch-content.js",
    "astro/dist/internal/__astro_slot.js",
    "astro/dist/internal/__astro_hoisted_scripts.js",
    "prismjs"
  ];
  for (const renderer of rendererInstances) {
    knownEntrypoints.push(renderer.server);
    if (renderer.client) {
      knownEntrypoints.push(renderer.client);
    }
    if (renderer.knownEntrypoints) {
      knownEntrypoints.push(...renderer.knownEntrypoints);
    }
    knownEntrypoints.push(...renderer.polyfills);
    knownEntrypoints.push(...renderer.hydrationPolyfills);
  }
  const external = snowpackExternals.concat([]);
  for (const renderer of rendererInstances) {
    if (renderer.external) {
      external.push(...renderer.external);
    }
  }
  const rendererSnowpackPlugins = rendererInstances.filter((renderer) => renderer.snowpackPlugin).map((renderer) => renderer.snowpackPlugin);
  const snowpackConfig = await loadConfiguration({
    root: fileURLToPath(projectRoot),
    mount: mountOptions,
    mode,
    plugins: [
      [fileURLToPath(new URL("../snowpack-plugin-jsx.cjs", import.meta.url)), astroPluginOptions],
      [fileURLToPath(new URL("../snowpack-plugin.cjs", import.meta.url)), astroPluginOptions],
      ...rendererSnowpackPlugins,
      resolveDependency("@snowpack/plugin-sass"),
      [
        resolveDependency("@snowpack/plugin-postcss"),
        {
          config: {
            plugins: __spreadValues({
              [resolveDependency("autoprefixer")]: {}
            }, astroConfig.devOptions.tailwindConfig ? {[resolveDependency("tailwindcss")]: astroConfig.devOptions.tailwindConfig} : {})
          }
        }
      ]
    ],
    devOptions: {
      open: "none",
      output: "stream",
      port: 0,
      hmr: isHmrEnabled,
      tailwindConfig: astroConfig.devOptions.tailwindConfig
    },
    buildOptions: {
      baseUrl: astroConfig.buildOptions.site || "/",
      out: fileURLToPath(astroConfig.dist)
    },
    packageOptions: {
      knownEntrypoints,
      external
    }
  });
  const polyfillNode = snowpackConfig.packageOptions.polyfillNode;
  if (!polyfillNode) {
    snowpackConfig.alias = Object.assign({}, Object.fromEntries(nodeBuiltinsMap), (_a = snowpackConfig.alias) != null ? _a : {});
  }
  snowpack = await startSnowpackServer({
    config: snowpackConfig,
    lockfile: null
  }, {
    isWatch: mode === "development"
  });
  const snowpackRuntime = snowpack.getServerRuntime();
  astroPluginOptions.configManager.snowpackRuntime = snowpackRuntime;
  return {snowpack, snowpackRuntime, snowpackConfig, configManager};
}
async function createRuntime(astroConfig, {mode, logging}) {
  let snowpack;
  const timer = {};
  const resolvePackageUrl = async (pkgName) => snowpack.getUrlForPackage(pkgName);
  timer.backend = performance.now();
  const {
    snowpack: snowpackInstance,
    snowpackRuntime,
    snowpackConfig,
    configManager
  } = await createSnowpack(astroConfig, {
    logging,
    mode,
    resolvePackageUrl
  });
  snowpack = snowpackInstance;
  debug(logging, "core", `snowpack created [${stopTimer(timer.backend)}]`);
  const runtimeConfig = {
    astroConfig,
    cache: {staticPaths: {}},
    logging,
    mode,
    snowpack,
    snowpackRuntime,
    snowpackConfig,
    configManager,
    manifest: createManifest({config: astroConfig})
  };
  snowpack.onFileChange(({filePath}) => {
    runtimeConfig.cache.staticPaths = {};
    if (filePath.includes(fileURLToPath(astroConfig.pages))) {
      runtimeConfig.manifest = createManifest({config: astroConfig});
    }
  });
  return {
    runtimeConfig,
    load: load.bind(null, runtimeConfig),
    getStaticPaths: getStaticPathsMemoized.bind(null, runtimeConfig),
    shutdown: () => snowpack.shutdown()
  };
}
export {
  createRuntime
};
//# sourceMappingURL=data:application/json;base64,
