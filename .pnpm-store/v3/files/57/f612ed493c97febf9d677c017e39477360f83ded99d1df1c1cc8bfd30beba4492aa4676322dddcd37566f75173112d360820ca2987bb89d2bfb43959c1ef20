"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAstroSys = void 0;
const ts = __importStar(require("typescript"));
const utils_1 = require("./utils");
const ignoredDirectories = [
    "node_modules/@types/react"
];
const ignoredDirectoriesExp = new RegExp("(" + ignoredDirectories.map(n => n + "$").join("|") + ")");
/**
 * This should only be accessed by TS Astro module resolution.
 */
function createAstroSys(getSnapshot) {
    const AstroSys = {
        ...ts.sys,
        fileExists(path) {
            let doesExist = ts.sys.fileExists(utils_1.ensureRealAstroFilePath(path));
            return doesExist;
        },
        directoryExists(path) {
            if (ignoredDirectoriesExp.test(path)) {
                return false;
            }
            return ts.sys.directoryExists(path);
        },
        readFile(path) {
            if (utils_1.isAstroFilePath(path) || utils_1.isVirtualAstroFilePath(path)) {
                console.log('readFile', path);
            }
            const snapshot = getSnapshot(path);
            return snapshot.getFullText();
        },
        readDirectory(path, extensions, exclude, include, depth) {
            const extensionsWithAstro = (extensions ?? []).concat(...['.astro', '.svelte', '.vue']);
            const result = ts.sys.readDirectory(path, extensionsWithAstro, exclude, include, depth);
            return result;
        },
    };
    if (ts.sys.realpath) {
        const realpath = ts.sys.realpath;
        AstroSys.realpath = function (path) {
            if (utils_1.isVirtualAstroFilePath(path)) {
                return realpath(utils_1.toRealAstroFilePath(path)) + '.ts';
            }
            return realpath(path);
        };
    }
    return AstroSys;
}
exports.createAstroSys = createAstroSys;
