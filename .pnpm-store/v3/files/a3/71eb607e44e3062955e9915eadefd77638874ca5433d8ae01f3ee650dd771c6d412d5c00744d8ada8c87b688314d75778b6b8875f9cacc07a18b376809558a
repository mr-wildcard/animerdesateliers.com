"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.substituteWithWhitespace = exports.isSubPath = exports.findTsConfigPath = exports.ensureRealFilePath = exports.ensureRealAstroFilePath = exports.toRealAstroFilePath = exports.toVirtualAstroFilePath = exports.isVirtualFilePath = exports.isVirtualSvelteFilePath = exports.isVirtualJsxFilePath = exports.isVirtualVueFilePath = exports.isVirtualAstroFilePath = exports.isAstroFilePath = exports.isVirtualFrameworkFilePath = exports.convertToLocationRange = exports.convertRange = exports.getExtensionFromScriptKind = exports.getScriptKindFromFileName = exports.mapSeverity = exports.getCommitCharactersForScriptElement = exports.scriptElementKindToCompletionItemKind = void 0;
const ts = __importStar(require("typescript"));
const vscode_languageserver_1 = require("vscode-languageserver");
const path_1 = require("path");
const utils_1 = require("../../utils");
const documents_1 = require("../../core/documents");
function scriptElementKindToCompletionItemKind(kind) {
    switch (kind) {
        case ts.ScriptElementKind.primitiveType:
        case ts.ScriptElementKind.keyword:
            return vscode_languageserver_1.CompletionItemKind.Keyword;
        case ts.ScriptElementKind.constElement:
            return vscode_languageserver_1.CompletionItemKind.Constant;
        case ts.ScriptElementKind.letElement:
        case ts.ScriptElementKind.variableElement:
        case ts.ScriptElementKind.localVariableElement:
        case ts.ScriptElementKind.alias:
            return vscode_languageserver_1.CompletionItemKind.Variable;
        case ts.ScriptElementKind.memberVariableElement:
        case ts.ScriptElementKind.memberGetAccessorElement:
        case ts.ScriptElementKind.memberSetAccessorElement:
            return vscode_languageserver_1.CompletionItemKind.Field;
        case ts.ScriptElementKind.functionElement:
            return vscode_languageserver_1.CompletionItemKind.Function;
        case ts.ScriptElementKind.memberFunctionElement:
        case ts.ScriptElementKind.constructSignatureElement:
        case ts.ScriptElementKind.callSignatureElement:
        case ts.ScriptElementKind.indexSignatureElement:
            return vscode_languageserver_1.CompletionItemKind.Method;
        case ts.ScriptElementKind.enumElement:
            return vscode_languageserver_1.CompletionItemKind.Enum;
        case ts.ScriptElementKind.moduleElement:
        case ts.ScriptElementKind.externalModuleName:
            return vscode_languageserver_1.CompletionItemKind.Module;
        case ts.ScriptElementKind.classElement:
        case ts.ScriptElementKind.typeElement:
            return vscode_languageserver_1.CompletionItemKind.Class;
        case ts.ScriptElementKind.interfaceElement:
            return vscode_languageserver_1.CompletionItemKind.Interface;
        case ts.ScriptElementKind.warning:
        case ts.ScriptElementKind.scriptElement:
            return vscode_languageserver_1.CompletionItemKind.File;
        case ts.ScriptElementKind.directory:
            return vscode_languageserver_1.CompletionItemKind.Folder;
        case ts.ScriptElementKind.string:
            return vscode_languageserver_1.CompletionItemKind.Constant;
    }
    return vscode_languageserver_1.CompletionItemKind.Property;
}
exports.scriptElementKindToCompletionItemKind = scriptElementKindToCompletionItemKind;
function getCommitCharactersForScriptElement(kind) {
    const commitCharacters = [];
    switch (kind) {
        case ts.ScriptElementKind.memberGetAccessorElement:
        case ts.ScriptElementKind.memberSetAccessorElement:
        case ts.ScriptElementKind.constructSignatureElement:
        case ts.ScriptElementKind.callSignatureElement:
        case ts.ScriptElementKind.indexSignatureElement:
        case ts.ScriptElementKind.enumElement:
        case ts.ScriptElementKind.interfaceElement:
            commitCharacters.push('.');
            break;
        case ts.ScriptElementKind.moduleElement:
        case ts.ScriptElementKind.alias:
        case ts.ScriptElementKind.constElement:
        case ts.ScriptElementKind.letElement:
        case ts.ScriptElementKind.variableElement:
        case ts.ScriptElementKind.localVariableElement:
        case ts.ScriptElementKind.memberVariableElement:
        case ts.ScriptElementKind.classElement:
        case ts.ScriptElementKind.functionElement:
        case ts.ScriptElementKind.memberFunctionElement:
            commitCharacters.push('.', ',');
            commitCharacters.push('(');
            break;
    }
    return commitCharacters.length === 0 ? undefined : commitCharacters;
}
exports.getCommitCharactersForScriptElement = getCommitCharactersForScriptElement;
function mapSeverity(category) {
    switch (category) {
        case ts.DiagnosticCategory.Error:
            return vscode_languageserver_1.DiagnosticSeverity.Error;
        case ts.DiagnosticCategory.Warning:
            return vscode_languageserver_1.DiagnosticSeverity.Warning;
        case ts.DiagnosticCategory.Suggestion:
            return vscode_languageserver_1.DiagnosticSeverity.Hint;
        case ts.DiagnosticCategory.Message:
            return vscode_languageserver_1.DiagnosticSeverity.Information;
    }
    return vscode_languageserver_1.DiagnosticSeverity.Error;
}
exports.mapSeverity = mapSeverity;
function getScriptKindFromFileName(fileName) {
    const ext = fileName.substr(fileName.lastIndexOf('.'));
    switch (ext.toLowerCase()) {
        case ts.Extension.Js:
            return ts.ScriptKind.JS;
        case ts.Extension.Jsx:
            return ts.ScriptKind.JSX;
        case ts.Extension.Ts:
            return ts.ScriptKind.TS;
        case ts.Extension.Tsx:
            return ts.ScriptKind.TSX;
        case ts.Extension.Json:
            return ts.ScriptKind.JSON;
        default:
            return ts.ScriptKind.Unknown;
    }
}
exports.getScriptKindFromFileName = getScriptKindFromFileName;
function getExtensionFromScriptKind(kind) {
    switch (kind) {
        case ts.ScriptKind.JSX:
            return ts.Extension.Jsx;
        case ts.ScriptKind.TS:
            return ts.Extension.Ts;
        case ts.ScriptKind.TSX:
            return ts.Extension.Tsx;
        case ts.ScriptKind.JSON:
            return ts.Extension.Json;
        case ts.ScriptKind.JS:
        default:
            return ts.Extension.Js;
    }
}
exports.getExtensionFromScriptKind = getExtensionFromScriptKind;
function convertRange(document, range) {
    return vscode_languageserver_1.Range.create(document.positionAt(range.start || 0), document.positionAt((range.start || 0) + (range.length || 0)));
}
exports.convertRange = convertRange;
function convertToLocationRange(defDoc, textSpan) {
    const range = documents_1.mapRangeToOriginal(defDoc, convertRange(defDoc, textSpan));
    // Some definition like the svelte component class definition don't exist in the original, so we map to 0,1
    if (range.start.line < 0) {
        range.start.line = 0;
        range.start.character = 1;
    }
    if (range.end.line < 0) {
        range.end = range.start;
    }
    return range;
}
exports.convertToLocationRange = convertToLocationRange;
const VirtualExtension = {
    ts: 'ts',
    tsx: 'tsx'
};
function isVirtualFrameworkFilePath(ext, virtualExt, filePath) {
    return filePath.endsWith('.' + ext + '.' + virtualExt);
}
exports.isVirtualFrameworkFilePath = isVirtualFrameworkFilePath;
function isAstroFilePath(filePath) {
    return filePath.endsWith('.astro');
}
exports.isAstroFilePath = isAstroFilePath;
function isVirtualAstroFilePath(filePath) {
    return isVirtualFrameworkFilePath('astro', VirtualExtension.tsx, filePath);
}
exports.isVirtualAstroFilePath = isVirtualAstroFilePath;
function isVirtualVueFilePath(filePath) {
    return isVirtualFrameworkFilePath('vue', VirtualExtension.ts, filePath);
}
exports.isVirtualVueFilePath = isVirtualVueFilePath;
function isVirtualJsxFilePath(filePath) {
    return isVirtualFrameworkFilePath('jsx', VirtualExtension.ts, filePath) || isVirtualFrameworkFilePath('tsx', VirtualExtension.ts, filePath);
}
exports.isVirtualJsxFilePath = isVirtualJsxFilePath;
function isVirtualSvelteFilePath(filePath) {
    return isVirtualFrameworkFilePath('svelte', VirtualExtension.ts, filePath);
}
exports.isVirtualSvelteFilePath = isVirtualSvelteFilePath;
function isVirtualFilePath(filePath) {
    return isVirtualAstroFilePath(filePath) || isVirtualVueFilePath(filePath) || isVirtualSvelteFilePath(filePath) || isVirtualJsxFilePath(filePath);
}
exports.isVirtualFilePath = isVirtualFilePath;
function toVirtualAstroFilePath(filePath) {
    if (isVirtualAstroFilePath(filePath)) {
        return filePath;
    }
    else if (isAstroFilePath(filePath)) {
        return `${filePath}.tsx`;
    }
    else {
        return filePath;
    }
}
exports.toVirtualAstroFilePath = toVirtualAstroFilePath;
function toRealAstroFilePath(filePath) {
    return filePath.slice(0, -'.tsx'.length);
}
exports.toRealAstroFilePath = toRealAstroFilePath;
function ensureRealAstroFilePath(filePath) {
    return isVirtualAstroFilePath(filePath) ? toRealAstroFilePath(filePath) : filePath;
}
exports.ensureRealAstroFilePath = ensureRealAstroFilePath;
function ensureRealFilePath(filePath) {
    if (isVirtualFilePath(filePath)) {
        let extLen = filePath.endsWith('.tsx') ? 4 : 3;
        return filePath.slice(0, filePath.length - extLen);
    }
    else {
        return filePath;
    }
}
exports.ensureRealFilePath = ensureRealFilePath;
function findTsConfigPath(fileName, rootUris) {
    const searchDir = path_1.dirname(fileName);
    const path = ts.findConfigFile(searchDir, ts.sys.fileExists, 'tsconfig.json') || ts.findConfigFile(searchDir, ts.sys.fileExists, 'jsconfig.json') || '';
    // Don't return config files that exceed the current workspace context.
    return !!path && rootUris.some((rootUri) => isSubPath(rootUri, path)) ? path : '';
}
exports.findTsConfigPath = findTsConfigPath;
/**  */
function isSubPath(uri, possibleSubPath) {
    return utils_1.pathToUrl(possibleSubPath).startsWith(uri);
}
exports.isSubPath = isSubPath;
/** Substitutes */
function substituteWithWhitespace(result, start, end, oldContent, before, after) {
    let accumulatedWS = 0;
    result += before;
    for (let i = start + before.length; i < end; i++) {
        let ch = oldContent[i];
        if (ch === '\n' || ch === '\r') {
            // only write new lines, skip the whitespace
            accumulatedWS = 0;
            result += ch;
        }
        else {
            accumulatedWS++;
        }
    }
    result = append(result, ' ', accumulatedWS - after.length);
    result += after;
    return result;
}
exports.substituteWithWhitespace = substituteWithWhitespace;
function append(result, str, n) {
    while (n > 0) {
        if (n & 1) {
            result += str;
        }
        n >>= 1;
        str += str;
    }
    return result;
}
