"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotManager = void 0;
const ts = __importStar(require("typescript"));
const utils_1 = require("./utils");
const DocumentSnapshot_1 = require("./DocumentSnapshot");
class SnapshotManager {
    constructor(projectFiles, fileSpec, workspaceRoot) {
        this.projectFiles = projectFiles;
        this.fileSpec = fileSpec;
        this.workspaceRoot = workspaceRoot;
        this.documents = new Map();
        this.lastLogged = new Date(new Date().getTime() - 60001);
        this.watchExtensions = [ts.Extension.Dts, ts.Extension.Js, ts.Extension.Jsx, ts.Extension.Ts, ts.Extension.Tsx, ts.Extension.Json];
    }
    updateProjectFiles() {
        const { include, exclude } = this.fileSpec;
        if (include?.length === 0)
            return;
        const projectFiles = ts.sys.readDirectory(this.workspaceRoot, this.watchExtensions, exclude, include);
        this.projectFiles = Array.from(new Set([...this.projectFiles, ...projectFiles]));
    }
    updateProjectFile(fileName, changes) {
        const previousSnapshot = this.get(fileName);
        if (changes) {
            if (!(previousSnapshot instanceof DocumentSnapshot_1.TypeScriptDocumentSnapshot)) {
                return;
            }
            previousSnapshot.update(changes);
        }
        else {
            const newSnapshot = DocumentSnapshot_1.createDocumentSnapshot(fileName, null);
            if (previousSnapshot) {
                newSnapshot.version = previousSnapshot.version + 1;
            }
            else {
                // ensure it's greater than initial version
                // so that ts server picks up the change
                newSnapshot.version += 1;
            }
            this.set(fileName, newSnapshot);
        }
    }
    has(fileName) {
        return this.projectFiles.includes(fileName) || this.getFileNames().includes(fileName);
    }
    get(fileName) {
        return this.documents.get(fileName);
    }
    set(fileName, snapshot) {
        return this.documents.set(fileName, snapshot);
    }
    delete(fileName) {
        this.projectFiles = this.projectFiles.filter((s) => s !== fileName);
        return this.documents.delete(fileName);
    }
    getFileNames() {
        return Array.from(this.documents.keys()).map((fileName) => utils_1.toVirtualAstroFilePath(fileName));
    }
    getProjectFileNames() {
        return [...this.projectFiles];
    }
    logStatistics() {
        const date = new Date();
        // Don't use setInterval because that will keep tests running forever
        if (date.getTime() - this.lastLogged.getTime() > 60000) {
            this.lastLogged = date;
            const projectFiles = this.getProjectFileNames();
            const allFiles = Array.from(new Set([...projectFiles, ...this.getFileNames()]));
            console.log('SnapshotManager File Statistics:\n' +
                `Project files: ${projectFiles.length}\n` +
                `Astro files: ${allFiles.filter((name) => name.endsWith('.astro')).length}\n` +
                `From node_modules: ${allFiles.filter((name) => name.includes('node_modules')).length}\n` +
                `Total: ${allFiles.length}`);
        }
    }
}
exports.SnapshotManager = SnapshotManager;
