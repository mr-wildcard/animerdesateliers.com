"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServer = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const documents_1 = require("./core/documents");
const config_1 = require("./core/config");
const plugins_1 = require("./plugins");
const DiagnosticsManager_1 = require("./core/DiagnosticsManager");
const utils_1 = require("./utils");
const TagCloseRequest = new vscode_languageserver_1.RequestType('html/tag');
/**
 * Starts `astro-languageservice`
 */
function startServer() {
    let connection = vscode_languageserver_1.createConnection(vscode_languageserver_1.ProposedFeatures.all);
    const docManager = documents_1.DocumentManager.newInstance();
    const configManager = new config_1.ConfigManager();
    const pluginHost = new plugins_1.PluginHost(docManager);
    connection.onInitialize((evt) => {
        const workspaceUris = evt.workspaceFolders?.map((folder) => folder.uri.toString()) ?? [evt.rootUri ?? ''];
        pluginHost.initialize({
            filterIncompleteCompletions: !evt.initializationOptions?.dontFilterIncompleteCompletions,
            definitionLinkSupport: !!evt.capabilities.textDocument?.definition?.linkSupport,
        });
        pluginHost.register(new plugins_1.HTMLPlugin(docManager, configManager));
        pluginHost.register(new plugins_1.CSSPlugin(docManager, configManager));
        pluginHost.register(new plugins_1.TypeScriptPlugin(docManager, configManager, workspaceUris));
        pluginHost.register(new plugins_1.AstroPlugin(docManager, configManager, workspaceUris));
        configManager.update(evt.initializationOptions?.configuration?.astro?.plugin ||
            evt.initializationOptions?.config ||
            {});
        configManager.updateTsJsUserPreferences(evt.initializationOptions?.configuration ||
            evt.initializationOptions?.typescriptConfig ||
            {});
        configManager.updateEmmetConfig(evt.initializationOptions?.configuration?.emmet || evt.initializationOptions?.emmetConfig || {});
        return {
            capabilities: {
                textDocumentSync: vscode_languageserver_1.TextDocumentSyncKind.Incremental,
                foldingRangeProvider: true,
                definitionProvider: true,
                renameProvider: true,
                completionProvider: {
                    resolveProvider: true,
                    triggerCharacters: [
                        '.',
                        '"',
                        "'",
                        '`',
                        '/',
                        '@',
                        '<',
                        ' ',
                        // Emmet
                        '>',
                        '*',
                        '#',
                        '$',
                        '+',
                        '^',
                        '(',
                        '[',
                        '@',
                        '-',
                        // No whitespace because
                        // it makes for weird/too many completions
                        // of other completion providers
                        // Astro
                        ':',
                    ],
                },
                hoverProvider: true,
                signatureHelpProvider: {
                    triggerCharacters: ['(', ',', '<'],
                    retriggerCharacters: [')'],
                },
            },
        };
    });
    // Documents
    connection.onDidOpenTextDocument((evt) => {
        docManager.openDocument(Object.assign({ overrideText: true }, evt.textDocument));
        docManager.markAsOpenedInClient(evt.textDocument.uri);
    });
    connection.onDidCloseTextDocument((evt) => docManager.closeDocument(evt.textDocument.uri));
    const diagnosticsManager = new DiagnosticsManager_1.DiagnosticsManager(connection.sendDiagnostics, docManager, pluginHost.getDiagnostics.bind(pluginHost));
    const updateAllDiagnostics = utils_1.debounceThrottle(() => diagnosticsManager.updateAll(), 1000);
    connection.onDidChangeTextDocument((evt) => {
        docManager.updateDocument(evt.textDocument.uri, evt.contentChanges);
    });
    connection.onDidChangeWatchedFiles((evt) => {
        const params = evt.changes
            .map((change) => ({
            fileName: utils_1.urlToPath(change.uri),
            changeType: change.type,
        }))
            .filter((change) => !!change.fileName);
        pluginHost.onWatchFileChanges(params);
        updateAllDiagnostics();
    });
    //connection.onDidChangeTextDocument(updateAllDiagnostics);
    // Config
    connection.onDidChangeConfiguration(({ settings }) => {
        configManager.update(settings.astro?.plugin);
        configManager.updateEmmetConfig(settings.emmet);
        configManager.updateTsJsUserPreferences(settings);
    });
    // Features
    connection.onCompletion(async (evt) => {
        const promise = pluginHost.getCompletions(evt.textDocument, evt.position, evt.context);
        return promise;
    });
    connection.onCompletionResolve((completionItem) => {
        const data = completionItem.data;
        if (!data) {
            return completionItem;
        }
        return pluginHost.resolveCompletion(data, completionItem);
    });
    connection.onHover((evt) => pluginHost.doHover(evt.textDocument, evt.position));
    connection.onDefinition((evt) => pluginHost.getDefinitions(evt.textDocument, evt.position));
    connection.onFoldingRanges((evt) => pluginHost.getFoldingRanges(evt.textDocument));
    connection.onRequest(TagCloseRequest, (evt) => pluginHost.doTagComplete(evt.textDocument, evt.position));
    connection.onSignatureHelp((evt, cancellationToken) => pluginHost.getSignatureHelp(evt.textDocument, evt.position, evt.context, cancellationToken));
    connection.onRenameRequest(evt => pluginHost.rename(evt.textDocument, evt.position, evt.newName));
    docManager.on('documentChange', utils_1.debounceThrottle(async (document) => diagnosticsManager.update(document), 1000));
    docManager.on('documentClose', (document) => diagnosticsManager.removeDiagnostics(document));
    connection.listen();
}
exports.startServer = startServer;
