"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigManager = void 0;
const lodash_1 = require("lodash");
/**
 * Default config for the language server.
 */
const defaultLSConfig = {
    typescript: {
        enable: true,
        diagnostics: { enable: true },
        hover: { enable: true },
        completions: { enable: true },
        definitions: { enable: true },
        findReferences: { enable: true },
        documentSymbols: { enable: true },
        codeActions: { enable: true },
        rename: { enable: true },
        selectionRange: { enable: true },
        signatureHelp: { enable: true },
        semanticTokens: { enable: true }
    },
    css: {
        enable: true,
        globals: '',
        diagnostics: { enable: true },
        hover: { enable: true },
        completions: { enable: true, emmet: true },
        documentColors: { enable: true },
        colorPresentations: { enable: true },
        documentSymbols: { enable: true },
        selectionRange: { enable: true }
    },
    html: {
        enable: true,
        hover: { enable: true },
        completions: { enable: true, emmet: true },
        tagComplete: { enable: true },
        documentSymbols: { enable: true },
        renameTags: { enable: true },
        linkedEditing: { enable: true }
    },
    astro: {
        enable: true,
        compilerWarnings: {},
        diagnostics: { enable: true },
        rename: { enable: true },
        format: {
            enable: true
        },
        completions: { enable: true },
        hover: { enable: true },
        codeActions: { enable: true },
        selectionRange: { enable: true }
    }
};
class ConfigManager {
    constructor() {
        this.config = defaultLSConfig;
        this.listeners = [];
        this.emmetConfig = {};
        this.tsUserPreferences = {
            typescript: {
                includeCompletionsForImportStatements: true,
                includeCompletionsWithInsertText: true,
                includeAutomaticOptionalChainCompletions: true
            },
            javascript: {
                includeCompletionsForImportStatements: true,
                includeCompletionsWithInsertText: true,
                includeAutomaticOptionalChainCompletions: true
            }
        };
    }
    /**
       * Updates config.
       */
    update(config) {
        // Ideally we shouldn't need the merge here because all updates should be valid and complete configs.
        // But since those configs come from the client they might be out of synch with the valid config:
        // We might at some point in the future forget to synch config settings in all packages after updating the config.
        this.config = lodash_1.merge({}, defaultLSConfig, this.config, config);
        // Merge will keep arrays/objects if the new one is empty/has less entries,
        // therefore we need some extra checks if there are new settings
        if (config.astro?.compilerWarnings) {
            this.config.astro.compilerWarnings = config.astro.compilerWarnings;
        }
        this.listeners.forEach((listener) => listener(this));
    }
    /**
       * Whether or not specified config is enabled
       * @param key a string which is a path. Example: 'astro.diagnostics.enable'.
       */
    enabled(key) {
        return !!this.get(key);
    }
    /**
      * Get specific config
      * @param key a string which is a path. Example: 'astro.diagnostics.enable'.
      */
    get(key) {
        return lodash_1.get(this.config, key);
    }
    /**
    * Register a listener which is invoked when the config changed.
    */
    onChange(callback) {
        this.listeners.push(callback);
    }
    updateEmmetConfig(config) {
        this.emmetConfig = config || {};
    }
    updateTsJsUserPreferences(config) {
        ['typescript', 'javascript'].forEach((lang) => {
            if (config[lang]) {
                this._updateTsUserPreferences(lang, config[lang]);
            }
        });
    }
    _updateTsUserPreferences(lang, config) {
        this.tsUserPreferences[lang] = {
            ...this.tsUserPreferences[lang],
            importModuleSpecifierPreference: config.preferences?.importModuleSpecifier,
            quotePreference: config.preferences?.quoteStyle,
            includeAutomaticOptionalChainCompletions: config.suggest?.includeAutomaticOptionalChainCompletions ?? true,
            includeCompletionsWithInsertText: true
        };
    }
    getEmmetConfig() {
        return this.emmetConfig;
    }
}
exports.ConfigManager = ConfigManager;
