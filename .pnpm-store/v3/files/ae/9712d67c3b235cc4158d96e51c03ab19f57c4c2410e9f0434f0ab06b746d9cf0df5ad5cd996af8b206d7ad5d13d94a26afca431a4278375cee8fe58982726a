"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageServiceManager = void 0;
const utils_1 = require("../../utils");
const languageService_1 = require("./languageService");
class LanguageServiceManager {
    constructor(docManager, configManager, workspaceUris) {
        this.createDocument = (fileName, content, overrideText) => {
            const uri = utils_1.pathToUrl(fileName);
            const document = this.docManager.openDocument({
                languageId: 'astro',
                version: 0,
                text: content,
                uri,
                overrideText,
            });
            return document;
        };
        this.docManager = docManager;
        this.configManager = configManager;
        this.workspaceUris = workspaceUris;
        this.docContext = {
            getWorkspaceRoot: (fileName) => this.getWorkspaceRoot(fileName),
            createDocument: this.createDocument,
        };
        const handleDocumentChange = (document) => {
            // This refreshes the document in the ts language service
            this.getTypeScriptDoc(document);
        };
        docManager.on('documentChange', utils_1.debounceSameArg(handleDocumentChange, (newDoc, prevDoc) => newDoc.uri === prevDoc?.uri, 1000));
        docManager.on('documentOpen', handleDocumentChange);
    }
    getWorkspaceRoot(fileName) {
        if (this.workspaceUris.length === 1)
            return utils_1.urlToPath(this.workspaceUris[0]);
        return this.workspaceUris.reduce((found, curr) => {
            const url = utils_1.urlToPath(curr);
            if (fileName.startsWith(url) && curr.length < url.length)
                return url;
            return found;
        }, '');
    }
    async getSnapshot(pathOrDoc) {
        const filePath = typeof pathOrDoc === 'string' ? pathOrDoc : pathOrDoc.getFilePath() || '';
        const tsService = await this.getTypeScriptLanguageService(filePath);
        return tsService.updateDocument(pathOrDoc);
    }
    async getTypeScriptDoc(document) {
        const lang = await languageService_1.getLanguageServiceForDocument(document, this.workspaceUris, this.docContext);
        const tsDoc = await this.getSnapshot(document);
        return { tsDoc, lang };
    }
    async getTypeScriptLangForPath(filePath) {
        return languageService_1.getLanguageServiceForPath(filePath, this.workspaceUris, this.docContext);
    }
    async getSnapshotManager(filePath) {
        return (await this.getTypeScriptLanguageService(filePath)).snapshotManager;
    }
    getTypeScriptLanguageService(filePath) {
        return languageService_1.getLanguageService(filePath, this.workspaceUris, this.docContext);
    }
}
exports.LanguageServiceManager = LanguageServiceManager;
