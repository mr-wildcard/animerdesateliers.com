import {promises as fsPromises} from "fs";
import * as colors from "kleur/colors";
import yargs from "yargs-parser";
import {z} from "zod";
import {build} from "./build.js";
import {formatConfigError, loadConfig} from "./config.js";
import devServer from "./dev.js";
import {preview} from "./preview.js";
import {reload} from "./reload.js";
import {check} from "./check.js";
const {readFile} = fsPromises;
const buildAndExit = async (astroConfig) => {
  const ret = await build(astroConfig);
  process.exit(ret);
};
const reloadAndExit = async () => {
  const ret = await reload();
  process.exit(ret);
};
const checkAndExit = async (astroConfig) => {
  const ret = await check(astroConfig);
  process.exit(ret);
};
function resolveArgs(flags) {
  const options = {
    projectRoot: typeof flags.projectRoot === "string" ? flags.projectRoot : void 0,
    site: typeof flags.site === "string" ? flags.site : void 0,
    sitemap: typeof flags.sitemap === "boolean" ? flags.sitemap : void 0,
    port: typeof flags.port === "number" ? flags.port : void 0,
    config: typeof flags.config === "string" ? flags.config : void 0
  };
  if (flags.version) {
    return {cmd: "version", options};
  } else if (flags.help) {
    return {cmd: "help", options};
  }
  const cmd = flags._[2];
  switch (cmd) {
    case "dev":
      return {cmd: "dev", options};
    case "build":
      return {cmd: "build", options};
    case "preview":
      return {cmd: "preview", options};
    case "check":
      return {cmd: "check", options};
    default:
      if (flags.reload) {
        return {cmd: "reload", options};
      }
      return {cmd: "help", options};
  }
}
function printHelp() {
  console.error(`  ${colors.bold("astro")} - Futuristic web development tool.

  ${colors.bold("Commands:")}
  astro dev             Run Astro in development mode.
  astro build           Build a pre-compiled production version of your site.
  astro preview         Preview your build locally before deploying.
  astro check           Check your project for errors.

  ${colors.bold("Flags:")}
  --config <path>       Specify the path to the Astro config file.
  --project-root <path> Specify the path to the project root folder.
  --no-sitemap          Disable sitemap generation (build only).
  --reload              Clean the cache, reinstalling dependencies.
  --verbose             Enable verbose logging
  --silent              Disable logging
  --version             Show the version number and exit.
  --help                Show this help message.
`);
}
async function printVersion() {
  const pkg = JSON.parse(await readFile(new URL("../package.json", import.meta.url), "utf-8"));
  console.error(pkg.version);
}
function mergeCLIFlags(astroConfig, flags) {
  if (typeof flags.sitemap === "boolean")
    astroConfig.buildOptions.sitemap = flags.sitemap;
  if (typeof flags.site === "string")
    astroConfig.buildOptions.site = flags.site;
  if (typeof flags.port === "number")
    astroConfig.devOptions.port = flags.port;
  if (typeof flags.hostname === "string")
    astroConfig.devOptions.hostname = flags.hostname;
}
async function runCommand(rawRoot, cmd, options) {
  try {
    const projectRoot = options.projectRoot || rawRoot;
    const astroConfig = await loadConfig(projectRoot, options.config);
    mergeCLIFlags(astroConfig, options);
    return cmd(astroConfig, options);
  } catch (err) {
    if (err instanceof z.ZodError) {
      console.log(formatConfigError(err));
    } else {
      console.error(colors.red(err.toString()));
    }
    process.exit(1);
  }
}
const cmdMap = new Map([
  ["build", buildAndExit],
  ["dev", devServer],
  ["preview", preview],
  ["reload", reloadAndExit],
  ["check", checkAndExit]
]);
async function cli(args) {
  const flags = yargs(args);
  const state = resolveArgs(flags);
  switch (state.cmd) {
    case "help": {
      printHelp();
      process.exit(1);
      break;
    }
    case "version": {
      await printVersion();
      process.exit(0);
      break;
    }
    case "reload": {
      await reloadAndExit();
      break;
    }
    case "build":
    case "preview":
    case "dev":
    case "check": {
      if (flags.reload) {
        await reload();
      }
      const cmd = cmdMap.get(state.cmd);
      if (!cmd)
        throw new Error(`Error running ${state.cmd}`);
      runCommand(flags._[3], cmd, state.options);
      break;
    }
  }
}
export {
  cli
};
//# sourceMappingURL=data:application/json;base64,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
