"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompletionsProviderImpl = void 0;
const utils_1 = require("../../../core/documents/utils");
const ts = __importStar(require("typescript"));
const vscode_languageserver_1 = require("vscode-languageserver");
const utils_2 = require("../utils");
const completionOptions = Object.freeze({
    importModuleSpecifierPreference: 'relative',
    importModuleSpecifierEnding: 'js',
    quotePreference: 'single',
});
class CompletionsProviderImpl {
    constructor(lang) {
        this.lang = lang;
    }
    async getCompletions(document, position, _completionContext) {
        // TODO: handle inside expression
        if (!utils_1.isInsideFrontmatter(document.getText(), document.offsetAt(position))) {
            return null;
        }
        const filePath = document.getFilePath();
        if (!filePath)
            throw new Error();
        const { tsDoc, lang } = await this.lang.getTypeScriptDoc(document);
        const fragment = await tsDoc.getFragment();
        const offset = document.offsetAt(position);
        const entries = lang.getCompletionsAtPosition(fragment.filePath, offset, completionOptions)?.entries || [];
        const completionItems = entries
            .map((entry) => this.toCompletionItem(fragment, entry, document.uri, position, new Set()))
            .filter((i) => i);
        return vscode_languageserver_1.CompletionList.create(completionItems, true);
    }
    async resolveCompletion(document, completionItem) {
        const { data: comp } = completionItem;
        const { tsDoc, lang } = await this.lang.getTypeScriptDoc(document);
        let filePath = utils_2.toVirtualAstroFilePath(tsDoc.filePath);
        if (!comp || !filePath) {
            return completionItem;
        }
        const fragment = await tsDoc.getFragment();
        const detail = lang.getCompletionEntryDetails(filePath, // fileName
        fragment.offsetAt(comp.position), // position
        comp.name, // entryName
        {}, // formatOptions
        comp.source, // source
        {}, // preferences
        comp.data // data
        );
        if (detail) {
            const { detail: itemDetail, documentation: itemDocumentation } = this.getCompletionDocument(detail);
            completionItem.detail = itemDetail;
            completionItem.documentation = itemDocumentation;
        }
        return completionItem;
    }
    toCompletionItem(fragment, comp, uri, position, existingImports) {
        return {
            label: comp.name,
            insertText: comp.insertText,
            kind: utils_2.scriptElementKindToCompletionItemKind(comp.kind),
            commitCharacters: utils_2.getCommitCharactersForScriptElement(comp.kind),
            // Make sure svelte component takes precedence
            sortText: comp.sortText,
            preselect: comp.isRecommended,
            // pass essential data for resolving completion
            data: {
                ...comp,
                uri,
                position,
            },
        };
    }
    getCompletionDocument(compDetail) {
        const { source, documentation: tsDocumentation, displayParts, tags } = compDetail;
        let detail = ts.displayPartsToString(displayParts);
        if (source) {
            const importPath = ts.displayPartsToString(source);
            detail = `Auto import from ${importPath}\n${detail}`;
        }
        const documentation = tsDocumentation ? { value: tsDocumentation.join('\n'), kind: vscode_languageserver_1.MarkupKind.Markdown } : undefined;
        return {
            documentation,
            detail,
        };
    }
}
exports.CompletionsProviderImpl = CompletionsProviderImpl;
