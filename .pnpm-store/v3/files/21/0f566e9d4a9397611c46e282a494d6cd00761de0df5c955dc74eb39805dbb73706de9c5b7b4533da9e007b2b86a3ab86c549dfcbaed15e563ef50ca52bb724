import cheerio from "cheerio";
import del from "del";
import eslexer from "es-module-lexer";
import fs from "fs";
import {bold, green, red, underline, yellow} from "kleur/colors";
import mime from "mime";
import path from "path";
import {performance} from "perf_hooks";
import glob from "tiny-glob";
import hash from "shorthash";
import srcsetParse from "srcset-parse";
import {fileURLToPath} from "url";
import {bundleCSS} from "./build/bundle/css.js";
import {bundleJS, bundleHoistedJS, collectJSImports} from "./build/bundle/js.js";
import {buildStaticPage, getStaticPathsForPage} from "./build/page.js";
import {generateSitemap} from "./build/sitemap.js";
import {collectBundleStats, logURLStats, mapBundleStatsToURLStats} from "./build/stats.js";
import {getDistPath, stopTimer} from "./build/util.js";
import {debug, defaultLogDestination, defaultLogLevel, error, info, warn} from "./logger.js";
import {createRuntime} from "./runtime.js";
const matchSrcset = srcsetParse.default;
const defaultLogging = {
  level: defaultLogLevel,
  dest: defaultLogDestination
};
function isRemoteOrEmbedded(url) {
  return url.startsWith("http://") || url.startsWith("https://") || url.startsWith("//") || url.startsWith("data:");
}
async function build(astroConfig, logging = defaultLogging) {
  const {projectRoot} = astroConfig;
  const buildState = {};
  const depTree = {};
  const timer = {};
  const runtimeLogging = {
    level: "error",
    dest: defaultLogDestination
  };
  if (!astroConfig.buildOptions.site) {
    warn(logging, "config", `Set "buildOptions.site" to generate correct canonical URLs and sitemap`);
  }
  const mode = "production";
  const astroRuntime = await createRuntime(astroConfig, {mode, logging: runtimeLogging});
  const {runtimeConfig} = astroRuntime;
  const {snowpackRuntime} = runtimeConfig;
  try {
    await del(fileURLToPath(astroConfig.dist));
    timer.build = performance.now();
    info(logging, "build", yellow("! building pages..."));
    const allRoutesAndPaths = await Promise.all(runtimeConfig.manifest.routes.map(async (route) => {
      if (route.path) {
        return [route, [route.path]];
      } else {
        const result = await getStaticPathsForPage({
          astroConfig,
          astroRuntime,
          route,
          snowpackRuntime,
          logging
        });
        if (result.rss.xml) {
          if (buildState[result.rss.url]) {
            throw new Error(`[getStaticPaths] RSS feed ${result.rss.url} already exists.
Use \`rss(data, {url: '...'})\` to choose a unique, custom URL. (${route.component})`);
          }
          buildState[result.rss.url] = {
            srcPath: new URL(result.rss.url, projectRoot),
            contents: result.rss.xml,
            contentType: "text/xml",
            encoding: "utf8"
          };
        }
        return [route, result.paths];
      }
    }));
    try {
      await Promise.all(allRoutesAndPaths.map(async ([route, paths]) => {
        for (const p of paths) {
          await buildStaticPage({
            astroConfig,
            buildState,
            route,
            path: p,
            astroRuntime
          });
        }
      }));
    } catch (e) {
      if (e.filename) {
        let stack = e.stack.replace(/Object\.__render \(/gm, "").replace(/\/_astro\/(.+)\.astro\.js\:\d+\:\d+\)/gm, (_, $1) => "file://" + fileURLToPath(projectRoot) + $1 + ".astro").split("\n");
        stack.splice(1, 0, `    at file://${e.filename}`);
        stack = stack.join("\n");
        error(logging, "build", `${red(`Unable to render ${underline(e.filename.replace(fileURLToPath(projectRoot), ""))}`)}

${stack}
`);
      } else {
        error(logging, "build", e.message);
      }
      error(logging, "build", red("\u2715 building pages failed!"));
      await astroRuntime.shutdown();
      return 1;
    }
    info(logging, "build", green("\u2714"), "pages built.");
    debug(logging, "build", `built pages [${stopTimer(timer.build)}]`);
    timer.deps = performance.now();
    const scanPromises = [];
    await eslexer.init;
    for (const id of Object.keys(buildState)) {
      if (buildState[id].contentType !== "text/html")
        continue;
      const pageDeps = findDeps(buildState[id].contents, {
        astroConfig,
        srcPath: buildState[id].srcPath,
        id
      });
      depTree[id] = pageDeps;
      for (const url of [...pageDeps.js, ...pageDeps.css, ...pageDeps.images]) {
        if (!buildState[url])
          scanPromises.push(astroRuntime.load(url).then((result) => {
            if (result.statusCode === 404) {
              if (url.startsWith("/_astro/")) {
                throw new Error(`${buildState[id].srcPath.href}: could not find file "${url}".`);
              }
              warn(logging, "build", `${buildState[id].srcPath.href}: could not find file "${url}". Marked as external.`);
              return;
            }
            if (result.statusCode !== 200) {
              throw result.error || new Error(`unexpected ${result.statusCode} response from "${url}".`);
            }
            buildState[url] = {
              srcPath: new URL(url, projectRoot),
              contents: result.contents,
              contentType: result.contentType || mime.getType(url) || ""
            };
          }));
      }
    }
    await Promise.all(scanPromises);
    debug(logging, "build", `scanned deps [${stopTimer(timer.deps)}]`);
    info(logging, "build", yellow("! optimizing css..."));
    timer.prebundleCSS = performance.now();
    await Promise.all([
      bundleCSS({buildState, astroConfig, logging, depTree}).then(() => {
        debug(logging, "build", `bundled CSS [${stopTimer(timer.prebundleCSS)}]`);
      }),
      bundleHoistedJS({buildState, astroConfig, logging, depTree, runtime: astroRuntime, dist: astroConfig.dist})
    ]);
    info(logging, "build", green("\u2714"), "css optimized.");
    const urlStats = await collectBundleStats(buildState, depTree);
    const jsImports = await collectJSImports(buildState);
    if (astroConfig.buildOptions.sitemap && astroConfig.buildOptions.site) {
      timer.sitemap = performance.now();
      info(logging, "build", yellow("! creating sitemap..."));
      const sitemap = generateSitemap(buildState, astroConfig.buildOptions.site);
      const sitemapPath = new URL("sitemap.xml", astroConfig.dist);
      await fs.promises.mkdir(path.dirname(fileURLToPath(sitemapPath)), {recursive: true});
      await fs.promises.writeFile(sitemapPath, sitemap, "utf8");
      info(logging, "build", green("\u2714"), "sitemap built.");
      debug(logging, "build", `built sitemap [${stopTimer(timer.sitemap)}]`);
    }
    timer.write = performance.now();
    for (const id of Object.keys(buildState)) {
      const outPath = new URL(`.${id}`, astroConfig.dist);
      const parentDir = path.dirname(fileURLToPath(outPath));
      await fs.promises.mkdir(parentDir, {recursive: true});
      const handle = await fs.promises.open(outPath, "w");
      await fs.promises.writeFile(handle, buildState[id].contents, buildState[id].encoding);
      await handle.close();
      delete buildState[id];
      delete depTree[id];
    }
    debug(logging, "build", `wrote files to disk [${stopTimer(timer.write)}]`);
    if (fs.existsSync(astroConfig.public)) {
      info(logging, "build", yellow(`! copying public folder...`));
      timer.public = performance.now();
      const cwd = fileURLToPath(astroConfig.public);
      const publicFiles = await glob("**/*", {cwd, filesOnly: true});
      await Promise.all(publicFiles.map(async (filepath) => {
        const srcPath = new URL(filepath, astroConfig.public);
        const distPath = new URL(filepath, astroConfig.dist);
        await fs.promises.mkdir(path.dirname(fileURLToPath(distPath)), {recursive: true});
        await fs.promises.copyFile(srcPath, distPath);
      }));
      debug(logging, "build", `copied public folder [${stopTimer(timer.public)}]`);
      info(logging, "build", green("\u2714"), "public folder copied.");
    } else {
      if (path.basename(astroConfig.public.toString()) !== "public") {
        info(logging, "tip", yellow(`! no public folder ${astroConfig.public} found...`));
      }
    }
    info(logging, "build", yellow(`! bundling...`));
    if (jsImports.size > 0) {
      timer.bundleJS = performance.now();
      const jsStats = await bundleJS(jsImports, {dist: astroConfig.dist, astroRuntime});
      mapBundleStatsToURLStats({urlStats, depTree, bundleStats: jsStats});
      debug(logging, "build", `bundled JS [${stopTimer(timer.bundleJS)}]`);
      info(logging, "build", green(`\u2714`), "bundling complete.");
    }
    logURLStats(logging, urlStats);
    await astroRuntime.shutdown();
    info(logging, "build", bold(green("\u25B6 Build Complete!")));
    return 0;
  } catch (err) {
    error(logging, "build", err.message);
    await astroRuntime.shutdown();
    return 1;
  }
}
function findDeps(html, {astroConfig, srcPath}) {
  const pageDeps = {
    js: new Set(),
    css: new Set(),
    images: new Set(),
    hoistedJS: new Map()
  };
  const $ = cheerio.load(html);
  $("script").each((_i, el) => {
    const src = $(el).attr("src");
    const hoist = $(el).attr("data-astro") === "hoist";
    if (hoist) {
      if (src) {
        pageDeps.hoistedJS.set(src, {
          src
        });
      } else {
        let content = $(el).html() || "";
        pageDeps.hoistedJS.set(`astro-virtual:${hash.unique(content)}`, {
          content
        });
      }
    } else if (src) {
      if (isRemoteOrEmbedded(src))
        return;
      pageDeps.js.add(getDistPath(src, {astroConfig, srcPath}));
    } else {
      const text = $(el).html();
      if (!text)
        return;
      const [imports] = eslexer.parse(text);
      for (const spec of imports) {
        const importSrc = spec.n;
        if (importSrc && !isRemoteOrEmbedded(importSrc)) {
          pageDeps.js.add(getDistPath(importSrc, {astroConfig, srcPath}));
        }
      }
    }
  });
  $("link[href]").each((_i, el) => {
    const href = $(el).attr("href");
    if (href && !isRemoteOrEmbedded(href) && ($(el).attr("rel") === "stylesheet" || $(el).attr("type") === "text/css" || href.endsWith(".css"))) {
      const dist = getDistPath(href, {astroConfig, srcPath});
      pageDeps.css.add(dist);
    }
  });
  $("img[src]").each((_i, el) => {
    const src = $(el).attr("src");
    if (src && !isRemoteOrEmbedded(src)) {
      pageDeps.images.add(getDistPath(src, {astroConfig, srcPath}));
    }
  });
  $("img[srcset]").each((_i, el) => {
    const srcset = $(el).attr("srcset") || "";
    for (const src of matchSrcset(srcset)) {
      if (!isRemoteOrEmbedded(src.url)) {
        pageDeps.images.add(getDistPath(src.url, {astroConfig, srcPath}));
      }
    }
  });
  $("source[srcset]").each((_i, el) => {
    const srcset = $(el).attr("srcset") || "";
    for (const src of matchSrcset(srcset)) {
      if (!isRemoteOrEmbedded(src.url)) {
        pageDeps.images.add(getDistPath(src.url, {astroConfig, srcPath}));
      }
    }
  });
  return pageDeps;
}
export {
  build,
  findDeps
};
//# sourceMappingURL=data:application/json;base64,
