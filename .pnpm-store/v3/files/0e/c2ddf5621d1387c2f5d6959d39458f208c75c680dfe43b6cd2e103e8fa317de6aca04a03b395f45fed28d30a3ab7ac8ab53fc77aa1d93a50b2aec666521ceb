"use strict";
/* eslint-disable require-jsdoc */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLanguageServiceForPath = exports.getLanguageServiceForDocument = exports.getLanguageService = void 0;
const ts = __importStar(require("typescript"));
const path_1 = require("path");
const utils_1 = require("./utils");
const SnapshotManager_1 = require("./SnapshotManager");
const DocumentSnapshot_1 = require("./DocumentSnapshot");
const module_loader_1 = require("./module-loader");
const services = new Map();
async function getLanguageService(path, workspaceUris, docContext) {
    const tsconfigPath = utils_1.findTsConfigPath(path, workspaceUris);
    const workspaceRoot = docContext.getWorkspaceRoot(path);
    let service;
    if (services.has(tsconfigPath)) {
        service = (await services.get(tsconfigPath));
    }
    else {
        const newServicePromise = createLanguageService(tsconfigPath, workspaceRoot, docContext);
        services.set(tsconfigPath, newServicePromise);
        service = await newServicePromise;
    }
    return service;
}
exports.getLanguageService = getLanguageService;
async function getLanguageServiceForDocument(document, workspaceUris, docContext) {
    return getLanguageServiceForPath(document.getFilePath() || '', workspaceUris, docContext);
}
exports.getLanguageServiceForDocument = getLanguageServiceForDocument;
async function getLanguageServiceForPath(path, workspaceUris, docContext) {
    return (await getLanguageService(path, workspaceUris, docContext)).getService();
}
exports.getLanguageServiceForPath = getLanguageServiceForPath;
async function createLanguageService(tsconfigPath, workspaceRoot, docContext) {
    const parseConfigHost = {
        ...ts.sys,
        readDirectory: (path, extensions, exclude, include, depth) => {
            return ts.sys.readDirectory(path, [...extensions, '.vue', '.svelte', '.astro', '.js', '.jsx'], exclude, include, depth);
        },
    };
    let configJson = (tsconfigPath && ts.readConfigFile(tsconfigPath, ts.sys.readFile).config) || getDefaultJsConfig();
    if (!configJson.extends) {
        configJson = Object.assign({
            exclude: getDefaultExclude(),
        }, configJson);
    }
    // Delete include so that astro files don't get excluded.
    delete configJson.include;
    const existingCompilerOptions = {
        jsx: ts.JsxEmit.Preserve,
        module: ts.ModuleKind.ESNext,
        target: ts.ScriptTarget.ESNext
    };
    const project = ts.parseJsonConfigFileContent(configJson, parseConfigHost, workspaceRoot, existingCompilerOptions, path_1.basename(tsconfigPath), undefined, [
        { extension: '.vue', isMixedContent: true, scriptKind: ts.ScriptKind.Deferred },
        { extension: '.svelte', isMixedContent: true, scriptKind: ts.ScriptKind.Deferred },
        { extension: '.astro', isMixedContent: true, scriptKind: ts.ScriptKind.Deferred },
    ]);
    let projectVersion = 0;
    const snapshotManager = new SnapshotManager_1.SnapshotManager(project.fileNames, {
        exclude: ['node_modules', 'dist'],
        include: ['src'],
    }, workspaceRoot || process.cwd());
    const astroModuleLoader = module_loader_1.createAstroModuleLoader(getScriptSnapshot, {});
    const host = {
        getNewLine: () => ts.sys.newLine,
        useCaseSensitiveFileNames: () => ts.sys.useCaseSensitiveFileNames,
        readFile: astroModuleLoader.readFile,
        writeFile: astroModuleLoader.writeFile,
        fileExists: astroModuleLoader.fileExists,
        directoryExists: astroModuleLoader.directoryExists,
        getDirectories: astroModuleLoader.getDirectories,
        readDirectory: astroModuleLoader.readDirectory,
        realpath: astroModuleLoader.realpath,
        getCompilationSettings: () => project.options,
        getCurrentDirectory: () => workspaceRoot,
        getDefaultLibFileName: () => ts.getDefaultLibFilePath(project.options),
        getProjectVersion: () => projectVersion.toString(),
        getScriptFileNames: () => Array.from(new Set([...snapshotManager.getFileNames(), ...snapshotManager.getProjectFileNames()])),
        getScriptSnapshot,
        getScriptVersion: (fileName) => {
            let snapshotVersion = getScriptSnapshot(fileName).version.toString();
            return snapshotVersion;
        },
    };
    const languageService = ts.createLanguageService(host);
    const languageServiceProxy = new Proxy(languageService, {
        get(target, prop) {
            return Reflect.get(target, prop);
        },
    });
    return {
        tsconfigPath,
        snapshotManager,
        getService: () => languageServiceProxy,
        updateDocument,
        deleteDocument,
    };
    function onProjectUpdated() {
        projectVersion++;
    }
    function deleteDocument(filePath) {
        snapshotManager.delete(filePath);
    }
    function updateDocument(documentOrFilePath) {
        const filePath = utils_1.ensureRealAstroFilePath(typeof documentOrFilePath === 'string' ? documentOrFilePath : documentOrFilePath.getFilePath() || '');
        const document = typeof documentOrFilePath === 'string' ? undefined : documentOrFilePath;
        if (!filePath) {
            throw new Error(`Unable to find document`);
        }
        const previousSnapshot = snapshotManager.get(filePath);
        if (document && previousSnapshot?.version.toString() === `${document.version}`) {
            return previousSnapshot;
        }
        const currentText = document ? document.getText() : null;
        const snapshot = DocumentSnapshot_1.createDocumentSnapshot(filePath, currentText, docContext.createDocument);
        snapshotManager.set(filePath, snapshot);
        onProjectUpdated();
        return snapshot;
    }
    function getScriptSnapshot(fileName) {
        fileName = utils_1.ensureRealAstroFilePath(fileName);
        let doc = snapshotManager.get(fileName);
        if (doc) {
            return doc;
        }
        doc = DocumentSnapshot_1.createDocumentSnapshot(fileName, null, docContext.createDocument);
        snapshotManager.set(fileName, doc);
        return doc;
    }
}
/**
 * This should only be used when there's no jsconfig/tsconfig at all
 */
function getDefaultJsConfig() {
    let compilerOptions = {
        maxNodeModuleJsDepth: 2,
        allowSyntheticDefaultImports: true,
        allowJs: true
    };
    return {
        compilerOptions,
        include: ['src'],
    };
}
function getDefaultExclude() {
    return ['dist', 'node_modules'];
}
