import {info, table} from "../logger.js";
import {underline, bold} from "kleur/colors";
import gzipSize from "gzip-size";
import prettyBytes from "pretty-bytes";
function createURLStats() {
  return new Map();
}
function createBundleStats() {
  return new Map();
}
async function addBundleStats(bundleStatsMap, code, filename) {
  const gzsize = await gzipSize(code);
  bundleStatsMap.set(filename, {
    size: Buffer.byteLength(code),
    gzipSize: gzsize
  });
}
function mapBundleStatsToURLStats({urlStats, depTree, bundleStats}) {
  var _a;
  for (let [srcPath, stats] of bundleStats) {
    for (let url of urlStats.keys()) {
      if (depTree[url] && depTree[url].js.has("/" + srcPath)) {
        (_a = urlStats.get(url)) == null ? void 0 : _a.stats.push(stats);
      }
    }
  }
}
async function collectBundleStats(buildState, depTree) {
  const urlStats = createURLStats();
  await Promise.all(Object.keys(buildState).map(async (id) => {
    if (!depTree[id])
      return;
    const stats = await Promise.all([...depTree[id].js, ...depTree[id].css, ...depTree[id].images].map(async (url) => {
      if (!buildState[url])
        return void 0;
      const stat = {
        size: Buffer.byteLength(buildState[url].contents),
        gzipSize: await gzipSize(buildState[url].contents)
      };
      return stat;
    }));
    urlStats.set(id, {
      dynamicImports: new Set(),
      stats: stats.filter((s) => !!s)
    });
  }));
  return urlStats;
}
function logURLStats(logging, urlStats) {
  const builtURLs = [...urlStats.keys()].sort((a, b) => a.localeCompare(b, "en", {numeric: true}));
  info(logging, null, "");
  const log = table(logging, [60, 20]);
  log(info, "   " + bold(underline("Pages")), bold(underline("Page Weight (GZip)")));
  const lastIndex = builtURLs.length - 1;
  builtURLs.forEach((url, index) => {
    var _a;
    const sep = index === 0 ? "\u250C" : index === lastIndex ? "\u2514" : "\u251C";
    const urlPart = " " + sep + " " + url;
    const bytes = ((_a = urlStats.get(url)) == null ? void 0 : _a.stats.map((s) => s.gzipSize).reduce((a, b) => a + b, 0)) || 0;
    const sizePart = prettyBytes(bytes);
    log(info, urlPart, sizePart);
  });
}
export {
  addBundleStats,
  collectBundleStats,
  createBundleStats,
  createURLStats,
  logURLStats,
  mapBundleStatsToURLStats
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2J1aWxkL3N0YXRzLnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBR0E7QUFDQTtBQUNBO0FBQ0E7QUFlTywwQkFBdUM7QUFDNUMsU0FBTyxJQUFJO0FBQUE7QUFHTiw2QkFBNkM7QUFDbEQsU0FBTyxJQUFJO0FBQUE7QUFHYiw4QkFBcUMsZ0JBQWdDLE1BQWMsVUFBa0I7QUFDbkcsUUFBTSxTQUFTLE1BQU0sU0FBUztBQUU5QixpQkFBZSxJQUFJLFVBQVU7QUFBQSxJQUMzQixNQUFNLE9BQU8sV0FBVztBQUFBLElBQ3hCLFVBQVU7QUFBQTtBQUFBO0FBSVAsa0NBQWtDLENBQUUsVUFBVSxTQUFTLGNBQTJGO0FBdEN6SjtBQXVDRSxXQUFTLENBQUMsU0FBUyxVQUFVLGFBQWE7QUFDeEMsYUFBUyxPQUFPLFNBQVMsUUFBUTtBQUMvQixVQUFJLFFBQVEsUUFBUSxRQUFRLEtBQUssR0FBRyxJQUFJLE1BQU0sVUFBVTtBQUN0RCx1QkFBUyxJQUFJLFNBQWIsbUJBQW1CLE1BQU0sS0FBSztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTXRDLGtDQUF5QyxZQUF5QixTQUEwQztBQUMxRyxRQUFNLFdBQVc7QUFFakIsUUFBTSxRQUFRLElBQ1osT0FBTyxLQUFLLFlBQVksSUFBSSxPQUFPLE9BQU87QUFDeEMsUUFBSSxDQUFDLFFBQVE7QUFBSztBQUNsQixVQUFNLFFBQVEsTUFBTSxRQUFRLElBQzFCLENBQUMsR0FBRyxRQUFRLElBQUksSUFBSSxHQUFHLFFBQVEsSUFBSSxLQUFLLEdBQUcsUUFBUSxJQUFJLFFBQVEsSUFBSSxPQUFPLFFBQVE7QUFDaEYsVUFBSSxDQUFDLFdBQVc7QUFBTSxlQUFPO0FBQzdCLFlBQU0sT0FBTztBQUFBLFFBQ1gsTUFBTSxPQUFPLFdBQVcsV0FBVyxLQUFLO0FBQUEsUUFDeEMsVUFBVSxNQUFNLFNBQVMsV0FBVyxLQUFLO0FBQUE7QUFFM0MsYUFBTztBQUFBO0FBR1gsYUFBUyxJQUFJLElBQUk7QUFBQSxNQUNmLGdCQUFnQixJQUFJO0FBQUEsTUFDcEIsT0FBTyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUFBO0FBQUE7QUFLbkMsU0FBTztBQUFBO0FBR0YscUJBQXFCLFNBQXFCLFVBQXVCO0FBQ3RFLFFBQU0sWUFBWSxDQUFDLEdBQUcsU0FBUyxRQUFRLEtBQUssQ0FBQyxHQUFHLE1BQU0sRUFBRSxjQUFjLEdBQUcsTUFBTSxDQUFFLFNBQVM7QUFDMUYsT0FBSyxTQUFTLE1BQU07QUFDcEIsUUFBTSxNQUFNLE1BQU0sU0FBUyxDQUFDLElBQUk7QUFDaEMsTUFBSSxNQUFNLFFBQVEsS0FBSyxVQUFVLFdBQVcsS0FBSyxVQUFVO0FBQzNELFFBQU0sWUFBWSxVQUFVLFNBQVM7QUFDckMsWUFBVSxRQUFRLENBQUMsS0FBSyxVQUFVO0FBaEZwQztBQWlGSSxVQUFNLE1BQU0sVUFBVSxJQUFJLFdBQU0sVUFBVSxZQUFZLFdBQU07QUFDNUQsVUFBTSxVQUFVLE1BQU0sTUFBTSxNQUFNO0FBQ2xDLFVBQU0sUUFDSixnQkFDRyxJQUFJLFNBRFAsbUJBRUksTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQ3BCLE9BQU8sQ0FBQyxHQUFHLE1BQU0sSUFBSSxHQUFHLE9BQU07QUFDbkMsVUFBTSxXQUFXLFlBQVk7QUFDN0IsUUFBSSxNQUFNLFNBQVM7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
